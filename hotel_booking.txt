import tkinter as tk
from tkinter import messagebox, filedialog, StringVar, OptionMenu, MULTIPLE, Listbox
from PIL import Image, ImageTk
from datetime import datetime

# List to store bookings and total amount
hotel_bookings = []
total_amount = 0.0

# Sample hotel data
room_types = ["Single Room", "Double Room", "Suite"]
hotels = ["Hotel A", "Hotel B", "Hotel C"]
amenities = ["Wi-Fi", "Breakfast Included", "Airport Pickup", "Pool Access"]
seating_classes = ["Standard", "Deluxe", "Suite"]
class_prices = {"Standard": 100.0, "Deluxe": 200.0, "Suite": 300.0}  # Price for each class

# Show bookings
def show_bookings():
    if hotel_bookings:
        booking_str = "\n".join([f"Name: {b['name']}, Email: {b['email']}, Contact: {b['contact']}, "
                                 f"Hotel: {b['hotel_name']}, Room Type: {b['room_type']}, Check-In: {b['checkin']}, "
                                 f"Check-Out: {b['checkout']}, Amenities: {', '.join(b['amenities'])}, Class: {b['class_type']}, "
                                 f"Price: Rs{b['price']:.2f}, Payment: {b['payment_status']}" for b in hotel_bookings])
        booking_str += f"\n\nTotal Amount: Rs{total_amount:.2f}"  # Display total amount
        messagebox.showinfo("Bookings", booking_str)
    else:
        messagebox.showinfo("Bookings", "No bookings found.")

# Update price based on class selection
def update_price(*args):
    class_type = class_var.get()
    price_per_room = class_prices.get(class_type, 0)
    entry_price.delete(0, tk.END)
    entry_price.insert(0, f"{price_per_room:.2f}")

# Submit booking
def submit_booking():
    global total_amount
    name = entry_name.get().strip()
    email = entry_email.get().strip()
    contact = entry_contact.get().strip()
    hotel_name = hotel_var.get()
    room_type = room_type_var.get()
    checkin = entry_checkin.get().strip()
    checkout = entry_checkout.get().strip()
    selected_amenities = listbox_amenities.curselection()
    amenities_selected = [listbox_amenities.get(i) for i in selected_amenities]
    price = entry_price.get().strip()
    payment_status = payment_var.get()
    class_type = class_var.get()

    try:
        price = float(price)
        if name and email and contact and hotel_name and room_type and checkin and checkout and amenities_selected and payment_status and class_type:
            # Store booking in the list
            hotel_bookings.append({
                'name': name,
                'email': email,
                'contact': contact,
                'hotel_name': hotel_name,
                'room_type': room_type,
                'checkin': checkin,
                'checkout': checkout,
                'amenities': amenities_selected,
                'class_type': class_type,
                'price': price,
                'payment_status': payment_status
            })
            total_amount += price  # Update total amount
            messagebox.showinfo("Success", "Booking successful!")
            # Clear input fields
            entry_name.delete(0, tk.END)
            entry_email.delete(0, tk.END)
            entry_contact.delete(0, tk.END)
            entry_price.delete(0, tk.END)
            listbox_amenities.selection_clear(0, tk.END)  # Clear selected amenities
        else:
            messagebox.showwarning("Input Error", "Please fill in all fields.")
    except ValueError:
        messagebox.showwarning("Input Error", "Please enter a valid price.")

# Function to download receipt
def download_receipt():
    if hotel_bookings:
        receipt_content = "Receipt for Bookings:\n\n"
        for b in hotel_bookings:
            receipt_content += (
                f"Name: {b['name']}\n"
                f"Email: {b['email']}\n"
                f"Contact: {b['contact']}\n"
                f"Hotel: {b['hotel_name']}\n"
                f"Room Type: {b['room_type']}\n"
                f"Check-In: {b['checkin']}\n"
                f"Check-Out: {b['checkout']}\n"
                f"Amenities: {', '.join(b['amenities'])}\n"
                f"Class: {b['class_type']}\n"
                f"Price: Rs{b['price']:.2f}\n"
                f"Payment Status: {b['payment_status']}\n"
                "-----------------------------\n"
            )
        receipt_content += f"Total Amount: Rs{total_amount:.2f}"
        # Open a file dialog to save the receipt
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text Files", ".txt"), ("All Files", ".*")],
                                                 title="Save Receipt As")
        if file_path:
            with open(file_path, 'w') as file:
                file.write(receipt_content)
            messagebox.showinfo("Success", "Receipt downloaded successfully!")
        else:
            messagebox.showwarning("No Bookings", "No bookings found to download a receipt.")

# Function to minimize the window
def minimize_window():
    root.iconify()

# Function to close the window
def close_window():
    root.destroy()

# Initialize the main window
root = tk.Tk()
root.title("Hotel Room Booking System")
root.geometry("1600x1200")
root.state('zoomed')  # Maximize the window

# Load the background image
image = Image.open(r"C:\Users\TEJASWINI CHANDARGI\OneDrive\Desktop\hcimock\bg.png")
image = image.resize((root.winfo_screenwidth(), root.winfo_screenheight()), Image.Resampling.LANCZOS)
photo = ImageTk.PhotoImage(image)

# Create a label and add the image
label = tk.Label(root, image=photo)
label.place(relwidth=1, relheight=1)

# Create a frame for input fields
input_frame = tk.Frame(root, bg='lightblue')
input_frame.place(relx=0.5, rely=0.4, anchor='center', relwidth=0.4, relheight=0.8)

# Title Label
tk.Label(input_frame, text="HOTEL ROOM BOOKING SYSTEM", bg='lightblue', 
         font=("Helvetica", 20, "bold"), fg='darkblue').grid(row=0, column=0, columnspan=2, pady=10)

# Input fields
tk.Label(input_frame, text="Name", bg='lightblue').grid(row=1, column=0, padx=10, pady=5, sticky='w')
entry_name = tk.Entry(input_frame)
entry_name.grid(row=1, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Email", bg='lightblue').grid(row=2, column=0, padx=10, pady=5, sticky='w')
entry_email = tk.Entry(input_frame)
entry_email.grid(row=2, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Contact", bg='lightblue').grid(row=3, column=0, padx=10, pady=5, sticky='w')
entry_contact = tk.Entry(input_frame)
entry_contact.grid(row=3, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Hotel", bg='lightblue').grid(row=4, column=0, padx=10, pady=5, sticky='w')
hotel_var = StringVar(input_frame)
hotel_var.set(hotels[0])  # Default value
OptionMenu(input_frame, hotel_var, *hotels).grid(row=4, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Room Type", bg='lightblue').grid(row=5, column=0, padx=10, pady=5, sticky='w')
room_type_var = StringVar(input_frame)
room_type_var.set(room_types[0])  # Default value
OptionMenu(input_frame, room_type_var, *room_types).grid(row=5, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Check-In Date (DD/MM/YYYY)", bg='lightblue').grid(row=6, column=0, padx=10, pady=5, sticky='w')
entry_checkin = tk.Entry(input_frame)
entry_checkin.grid(row=6, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Check-Out Date (DD/MM/YYYY)", bg='lightblue').grid(row=7, column=0, padx=10, pady=5, sticky='w')
entry_checkout = tk.Entry(input_frame)
entry_checkout.grid(row=7, column=1, padx=10, pady=5)

# Amenities Listbox for multiple selection
tk.Label(input_frame, text="Select Amenities", bg='lightblue').grid(row=8, column=0, padx=10, pady=5, sticky='w')
listbox_amenities = Listbox(input_frame, selectmode=MULTIPLE, height=5)
for amenity in amenities:
    listbox_amenities.insert(tk.END, amenity)
listbox_amenities.grid(row=8, column=1, padx=10, pady=5)

# Class Type selection
tk.Label(input_frame, text="Class Type", bg='lightblue').grid(row=9, column=0, padx=10, pady=5, sticky='w')
class_var = StringVar(input_frame)
class_var.set(seating_classes[0])  # Default value
class_var.trace('w', update_price)  # Trace changes to update price
OptionMenu(input_frame, class_var, *seating_classes).grid(row=9, column=1, padx=10, pady=5)

tk.Label(input_frame, text="Price", bg='lightblue').grid(row=10, column=0, padx=10, pady=5, sticky='w')
entry_price = tk.Entry(input_frame)
entry_price.grid(row=10, column=1, padx=10, pady=5)

# Payment status options
payment_var = StringVar(input_frame)
payment_var.set("Paid")  # Default value
tk.Label(input_frame, text="Payment Status", bg='lightblue').grid(row=11, column=0, padx=10, pady=5, sticky='w')
tk.Radiobutton(input_frame, text="Paid", variable=payment_var, value="Paid", bg='lightblue').grid(row=11, column=1, sticky='w')
tk.Radiobutton(input_frame, text="Pending", variable=payment_var, value="Pending", bg='lightblue').grid(row=11, column=1, sticky='e')

# Buttons for submitting and showing bookings
button_frame = tk.Frame(input_frame, bg='lightblue')
button_frame.grid(row=12, column=0, columnspan=2, pady=10)
tk.Button(button_frame, text="Submit", command=submit_booking).pack(side='right', padx=5)
tk.Button(button_frame, text="Show Bookings", command=show_bookings).pack(side='right', padx=5)
tk.Button(button_frame, text="Download Receipt", command=download_receipt).pack(side='right', padx=5)

# Minimize and Close buttons
minimize_button = tk.Button(input_frame, text="Minimize", command=minimize_window)
minimize_button.grid(row=13, column=0, padx=5, pady=5, sticky='e')
close_button = tk.Button(input_frame, text="Close", command=close_window)
close_button.grid(row=13, column=1, padx=5, pady=5, sticky='e')

# Run the application
root.mainloop()